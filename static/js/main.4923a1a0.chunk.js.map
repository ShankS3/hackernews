{"version":3,"sources":["serviceWorker.js","reducers/initalState.js","reducers/postsReducer.js","constants/actionTypes.js","reducers/index.js","store/configureStore.js","components/Header.js","constants/applicationConstants.js","actions/postsActions.js","components/Posts.js","hooks/useInfiniteScroll.js","containers/PostsContainer.js","components/PostDetails.js","containers/PostDetailsContainer.js","App.js","Root.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","posts","stories","newStories","allStories","pageNo","loading","errorMessage","filteredData","list","data","newList","map","d","_","findIndex","o","title","compact","addStories","uniq","addOldStories","postsReducer","initialState","action","type","objectAssign","response","hits","rootReducer","history","combineReducers","router","connectRouter","createBrowserHistory","Header","Navbar","dark","color","NavbarBrand","tag","className","BASE_URL","onFetchPostsFailure","message","_errorHandling","dispatch","parseInt","fetchPosts","axios","get","onFetchNewPosts","success","onFetchOldPosts","onFetchOldPostsSuccess","generateRows","name","story","key","created_at_i","onClick","push","objectID","author","Moment","created_at","format","Posts","actions","useState","setLoading","count","setCount","handleScroll","innerHeight","document","documentElement","scrollTop","offsetHeight","useEffect","addEventListener","removeEventListener","useInfiniteScroll","timer","setTimeout","clearTimeout","newPosts","length","tableRows","Card","CardHeader","CardBody","Table","hover","PostsContainer","connect","bindActionCreators","PostDetails","Button","JSON","stringify","PostDetailsContainer","App","exact","path","component","onRenderCallback","id","phase","actualDuration","baseDuration","startTime","commitTime","interactions","store","preloadedState","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","thunk","routerMiddleware","createStore","createRootReducer","applyMiddleware","configureStore","Root","StrictMode","onRender","render","getElementById","URL","process","href","origin","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4923a1a0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n  posts: {\n    stories: {\n      newStories: [],\n      allStories: []\n    },\n    pageNo: 0,\n    loading: false,\n    error: false,\n    errorMessage: ''\n  }\n};\n","import _ from 'lodash';\nimport objectAssign from 'object-assign';\nimport {\n  ON_FETCH_POSTS_LOADING,\n  ON_FETCH_POSTS_FAILURE,\n  ON_FETCH_NEW_POSTS_SUCCESS,\n  ON_FETCH_OLD_POSTS_SUCCESS\n} from '../constants/actionTypes';\nimport initialState from './initalState';\n\nconst filteredData = (list, data) => {\n  let newList = data.map(d => {\n    const index = _.findIndex(list, function(o) { return o.title === d.title; });\n    if(index === -1) return d;\n    return false;\n  });\n\n  return _.compact(newList);\n}\n\nconst addStories = ( list, data) => {\n  let {newStories, allStories } = list;\n  allStories = [...newStories, ...allStories];\n  newStories = [];\n  newStories = filteredData(allStories, data);\n  allStories = _.uniq(allStories);\n  return { newStories, allStories };\n}\n\nconst addOldStories = ( list, data) => {\n  let newList = filteredData(list, data);\n  return [...list, ...newList];\n}\n\nexport default function postsReducer(state = initialState.posts, action) {\n  switch(action.type) {\n    case ON_FETCH_POSTS_LOADING:\n      return objectAssign({}, state, {\n        loading: true,\n        error: false,\n        errorMessage: '',\n      });\n    case ON_FETCH_NEW_POSTS_SUCCESS:\n      return {\n        stories: addStories(state.stories, action.response.data.hits),\n        loading: false,\n        error: false,\n        errorMessage: ''\n      };\n    case ON_FETCH_OLD_POSTS_SUCCESS:\n      return {\n        stories: objectAssign({}, state.stories, {\n          allStories: addOldStories(state.stories.allStories, action.response.data.hits)\n        }),\n        pageNo: action.pageNo,\n        loading: false,\n        error: false,\n        errorMessage: ''\n      };\n    case ON_FETCH_POSTS_FAILURE:\n      return objectAssign({}, state, {\n        loading: false,\n        error: true,\n        errorMessage: action.errorMessage\n      });\n    default:\n      return state;\n  }\n}\n","export const ON_FETCH_POSTS_LOADING = 'ON_FETCH_POSTS_LOADING';\nexport const ON_FETCH_NEW_POSTS_SUCCESS = 'ON_FETCH_NEW_POSTS_SUCCESS';\nexport const ON_FETCH_OLD_POSTS_SUCCESS = 'ON_FETCH_OLD_POSTS_SUCCESS';\nexport const ON_FETCH_POSTS_FAILURE = 'ON_FETCH_POSTS_FAILURE';\n","import { combineReducers } from 'redux'\nimport { connectRouter } from 'connected-react-router'\nimport posts from './postsReducer'\n\nconst rootReducer = (history) => combineReducers({\n  posts,\n  router: connectRouter(history)\n})\n\nexport default rootReducer","import thunk from 'redux-thunk';\nimport { createBrowserHistory } from 'history'\nimport { applyMiddleware, compose, createStore } from 'redux'\nimport { routerMiddleware } from 'connected-react-router'\nimport createRootReducer from '../reducers'\n\nexport const history = createBrowserHistory()\n\nexport default function configureStore(preloadedState) {\n  const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n  const middlewares = [thunk, routerMiddleware(history)];\n  const store = createStore(\n    createRootReducer(history),\n    preloadedState,\n    composeEnhancer(\n      applyMiddleware(...middlewares),\n    ),\n  )\n\n  // Hot reloading\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers', () => {\n      store.replaceReducer(createRootReducer(history));\n    });\n  }\n\n  return store\n}","import React from 'react';\nimport { Navbar, NavbarBrand } from 'reactstrap';\n\nconst Header = () => {\n  return(\n    <Navbar dark={true} color='dark'>\n      <NavbarBrand tag=\"h2\" className=\"text-warning\">Hacker News</NavbarBrand>\n    </Navbar>\n  );\n};\n\nexport default Header;\n","export const BASE_URL = 'https://hn.algolia.com/api/v1/';\nexport const RADIX = 10;\nexport const BAD_REQUEST = 400;\nexport const FORBIDDEN = 403;\nexport const NOT_FOUND = 404;\nexport const INTERNAL_SERVER_ERROR = 500;\nexport const MAX_STORIES = 1000;\nexport const STORY_INCREMENT = 20;\n","import axios from 'axios';\nimport {\n  RADIX,\n  BASE_URL,\n  BAD_REQUEST,\n  FORBIDDEN,\n  NOT_FOUND,\n  INTERNAL_SERVER_ERROR\n} from '../constants/applicationConstants';\nimport {\n  ON_FETCH_POSTS_LOADING,\n  ON_FETCH_NEW_POSTS_SUCCESS,\n  ON_FETCH_OLD_POSTS_SUCCESS,\n  ON_FETCH_POSTS_FAILURE\n} from '../constants/actionTypes';\n\nconst onFetchPostsLoading = () => ({ type: ON_FETCH_POSTS_LOADING });\n\nconst onFetchPostsFailure = message => ({ type: ON_FETCH_POSTS_FAILURE, message });\n\nconst onFetchNewPostsSuccess = response => \n  ({ type: ON_FETCH_NEW_POSTS_SUCCESS, response });\n\nconst onFetchOldPostsSuccess = (response, pageNo) => \n  ({ type: ON_FETCH_OLD_POSTS_SUCCESS, response, pageNo });\n\nfunction _errorHandling(error, dispatch){\n  switch(parseInt(error, RADIX)) {\n    case BAD_REQUEST: \n      dispatch(onFetchPostsFailure(\"Error encountered. Please refresh!\"));\n      break;\n    case FORBIDDEN:\n      dispatch(onFetchPostsFailure(\"Access to information is currently forbidden!\"));\n      break;\n    case NOT_FOUND:\n      dispatch(onFetchPostsFailure(\"Unable to find the information you are looking for!\"));\n      break;\n    case INTERNAL_SERVER_ERROR:\n      dispatch(onFetchPostsFailure(\"We seem to have encountered an issue. Try again later!\"));\n      break;\n    default:\n      dispatch(onFetchPostsFailure(\"We seem to have encountered an issue. Try again later!\"));\n  }\n}\n\nconst fetchPosts = (pageNo = 0) => axios.get(`${BASE_URL}search_by_date?tags=story&page=${pageNo}`);\n\nconst onFetchNewPosts = () => {\n  return function (dispatch) {\n    dispatch(onFetchPostsLoading());\n    return fetchPosts().then(\n      (success) => dispatch(onFetchNewPostsSuccess(success)),\n      (error) => _errorHandling(error, dispatch)\n    );\n  }\n};\n\nconst onFetchOldPosts = (pageNo) => {\n  return function (dispatch) {\n    dispatch(onFetchPostsLoading());\n    return fetchPosts(pageNo).then(\n      (success) => dispatch(onFetchOldPostsSuccess(success, pageNo)),\n      (error) => _errorHandling(error, dispatch)\n    );\n  }\n};\n\nexport { onFetchNewPosts, onFetchOldPosts };\n","import React, { useEffect } from 'react';\nimport Moment from 'moment';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, Table, Spinner, CardHeader } from 'reactstrap';\nimport { useInfiniteScroll } from '../hooks/useInfiniteScroll';\n\nfunction generateRows(list, name, history) {\n  return list.map(story => (\n    <tr \n      className={name+\" cursor-pointer\"} \n      key={story.created_at_i+\"_\"+story.title}\n      onClick={() => history.push( `/${story.objectID}`, { story })}>\n      <td>{story.title}</td>\n      <td>{story.author}</td>\n      <td>{Moment(story.created_at).format('LLL')}</td>\n    </tr>\n  ))\n}\n\nconst Posts = ({posts, actions, history}) => {\n  useInfiniteScroll(actions, posts.pageNo);\n  \n  useEffect(() => {\n    const timer = setTimeout(() => {\n      actions.onFetchNewPosts();\n    }, 10000);\n    \n    return () => clearTimeout(timer);\n  });\n\n  const newPosts = posts.stories.newStories.length > 0 && \n                    generateRows(posts.stories.newStories, \"new-posts\", history);\n  const tableRows = posts.stories.allStories.length > 0 && \n                      generateRows(posts.stories.allStories, \"posts\", history);\n\n  return (\n    <Card color=\"dark\">\n      <CardHeader tag=\"h5\" className=\"text-light\">All stories</CardHeader>\n      <CardBody>\n        {\n          (tableRows || newPosts) && (\n            <Table className=\"posts-table\" hover>\n              <tbody>\n                {newPosts}\n                {tableRows}\n              </tbody>\n            </Table>\n          )} \n          { posts.loading && (\n            <div className=\"d-flex justify-content-center\">\n              <b className=\"text-light\">Loading... </b>\n            </div>\n          )}\n      </CardBody>\n    </Card>\n  );\n};\n\nPosts.propTypes = {\n  posts   : PropTypes.object.isRequired,\n  actions : PropTypes.object.isRequired,\n  history : PropTypes.object.isRequired,\n}\n\nexport default Posts;\n","import { useState, useEffect } from 'react';\n\nexport const useInfiniteScroll = (actions, pageNo) => {\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState(pageNo+1);\n\n  const handleScroll = () => {\n    if(\n      window.innerHeight + document.documentElement.scrollTop !== \n      document.documentElement.offsetHeight || \n      loading\n    ){\n      return false;\n    }\n    \n    setLoading(true);\n  };\n\n  useEffect(() => {\n    if(!loading) return;\n    console.log(\"count\", count);\n    actions.onFetchOldPosts(count);\n    setCount( count + 1);\n    setLoading(false);\n  });\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  });\n};\n","import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as actions from '../actions/postsActions';\nimport Posts from '../components/Posts';\n\nconst mapStateToProps = (state) => {\n  return {\n    posts: state.posts\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    actions: bindActionCreators(actions, dispatch)\n  };\n}\n\nconst PostsContainer = connect(mapStateToProps, mapDispatchToProps)(Posts);\n\nexport default PostsContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'reactstrap';\n\nconst PostDetails = ({location, history}) => {\n  return (\n    <>\n      <Button color=\"secondary\" onClick={() => history.push(\"/\")}>\n        Back\n      </Button>\n      <div>{JSON.stringify(location.state.story)}</div>\n    </>\n  );\n}\n\nPostDetails.propTypes = {\n  location: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n}\n\nexport default PostDetails;\n","import { connect } from 'react-redux';\nimport Posts from '../components/PostDetails';\n\nconst PostDetailsContainer = connect(null, null)(Posts);\n\nexport default PostDetailsContainer;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport PostsContainer from './containers/PostsContainer';\nimport PostDetailsContainer from './containers/PostDetailsContainer';\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <div className=\"content-wrapper\">\n        <Switch>\n          <Route exact path=\"/\" component={PostsContainer} />\n          <Route exact path=\"/:id\" component={PostDetailsContainer} />\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React, { Profiler } from 'react';\nimport { Provider } from 'react-redux';\nimport configureStore, { history } from './store/configureStore';\nimport { ConnectedRouter } from 'connected-react-router';\nimport App from './App';\n\nfunction onRenderCallback(\n  id,\n  phase,\n  actualDuration,\n  baseDuration,\n  startTime,\n  commitTime,\n  interactions\n){}\n\nconst store = configureStore();\n\nconst Root = () => {\n  return (\n    <React.StrictMode>\n      <Provider store={store}>\n        <ConnectedRouter history={history}>\n          <Profiler id=\"hackernews\" onRender={onRenderCallback}>\n            <App />\n          </Profiler>\n        </ConnectedRouter>\n      </Provider>\n    </React.StrictMode>\n  );\n};\n\nexport default Root;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Root from './Root';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/index.css';\n\n\nrender(<Root />,  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}